//using FindMD5HashWithLeadingZeroes;
//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Threading.Tasks;

//namespace MD5HashWithLeadingZeroes.Tests
//{
//    public class BreakIntoChunksTest
//    {

//        [Theory]
//        [InlineData("They are deterministic", "01010100011010000110010101111001001000000110000101110010011001010010000001100100011001010111010001100101011100100110110101101001011011100110100101110011011101000110100101100011100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010110000")]
//        [InlineData("ckczppom", "01100011011010110110001101111010011100000111000001101111011011011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000")]

//        //public void BreakIntoChunks_512Bits_ReturnTrue(string input, string expectedValue)
//        //{
//        //    //Arrange
//        //    var md5Hash = new FindMD5Hash();
//        //    var byteString = md5Hash.ToBinary(md5Hash.ConvertToByteArray(input, Encoding.ASCII));
//        //    var paddedString = md5Hash.AddPadding(byteString, input);

//        //    //Act
//        //    var actual = md5Hash.BreakIntoChunks(paddedString, 512);


//        //    //Assert
//        //    Assert.Equal(expectedValue, actual[0]);
//        //}

//        //public static IEnumerable<object[]> TestData
//        //{
//        //    get
//        //    {
//        //        //"They are deterministic" input
//        //        var data1 = new List<string>();
//        //        "010101000110100001100101011110");
//        //        "100100000011000010111001001100");
//        //        "101001000000110010001100101011");
//        //        "101000110010101110010011011010");
//        //        "110100101101110011010010111001");
//        //        "101110100011010010110001110000");
//        //        "000000000000000000000000000000");
//        //        "000000000000000000000000000000");
//        //        "000000000000000000000000000000");
//        //        "000000000000000000000000000000");
//        //        "000000000000000000000000000000");
//        //        "000000000000000000000000000000");
//        //        "000000000000000000000000000000");
//        //        "000000000000000000000000000000");
//        //        "000000000000000000000000000000");
//        //        "000000000000000000000000000000");
//        //        "000000000000000000000001011000");
//        //        yield return data1.ToArray();
//        //    }
//        //}

//        //[Theory]
//        //[MemberData(nameof(TestData))]

//        //public void BreakIntoChunks_32Bits_ReturnTrue(List<string> expectedValue)
//        //{
//        //    //Arrange
//        //    var md5Hash = new FindMD5Hash();
//        //    var input = "01010100011010000110010101111001001000000110000101110010011001010010000001100100011001010111010001100101011100100110110101101001011011100110100101110011011101000110100101100011100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010110000";
//        //    var byteString = md5Hash.ToBinary(md5Hash.ConvertToByteArray(input, Encoding.ASCII));
//        //    var paddedString = md5Hash.AddPadding(byteString, input);

//        //    //Act
//        //    var actual = md5Hash.BreakIntoChunks(paddedString, 36);

//        //    //Assert
//        //    Assert.StrictEqual(expectedValue, actual);
//        //}
//    } 
//}

